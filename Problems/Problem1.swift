//
//  1_multiplesOf3n5.swift
//  ProjectEuler
//
//  Created by Ho, Derrick on 10/24/17.
//  Copyright Â© 2017 WebMD. All rights reserved.
//

import Foundation

/**
 Problem 1
 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
 
 Find the sum of all the multiples of 3 or 5 below 1000.
 */

struct Problem1 {
    let multiple1: Int
    let multiple2: Int
    var range: CountableRange = 0..<1000
}

extension Problem1 {
    func sumOfMultiples() -> Int {
        return Array(range).reduce(0) { (sum: Int, n: Int) in (((n % multiple1 == 0) || (n % multiple2 == 0)) ? n : 0) + sum }
    }
}

/**
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
struct Problem2 {
    let maxFibonacci = 4_000_000
}

extension Problem2 {
    func sumEvenFib() -> Int {
        var total = 2
        var n0 = 1
        var n1 = 2
        
        var n = 0
        while n < maxFibonacci {
            n = n0 + n1
            total = total + (n % 2 == 0 ? n : 0)
            (n0, n1) = (n1, n)
        }
        return total
    }
}

struct Problem3 {
    func primeArray(max: Int) -> [Bool] {
        var numbers = Array(0...Int(sqrt(Double(max)))).map({ _ in true })
        numbers[0] = false
        numbers[1] = false
        
        var i = 2
        while i < numbers.count {
            var m = 2
            var j = i * m
            while j < numbers.count {
                numbers[j] = false
                
                m += 1
                j = i * m
            }
            
            i += 1
        }
        return numbers
    }
    
    func arrayOfPrimes(lessThanOrEqualTo num: Int) -> [Int] {
        return primeArray(max: num).enumerated().filter({ $0.element }).map({ $0.offset })
    }
    
    func primeFactors(of num: Int) -> [Int] {
        return arrayOfPrimes(lessThanOrEqualTo: num).filter { num % $0 == 0 }
    }
}
